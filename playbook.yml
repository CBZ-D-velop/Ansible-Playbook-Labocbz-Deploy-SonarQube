---
- name: "Deploy SonarQube"
  hosts: "{{ tower_env | default([]) }}"
  gather_facts: true
  become: true
  become_method: "ansible.builtin.sudo"

  tasks:
    - name: "Install SonarQube"
      when: inv_install_sonarqube | default(false)
      block:

        - name: "Include labocbz.prepare_host"
          tags:
            - "labocbz.prepare_host"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.install_docker"
          tags:
            - "labocbz.install_docker"
          vars:
            install_docker__portainer: "{{ inv_install_docker__portainer }}"
            install_docker__portainer_http_port: "{{ inv_install_docker__portainer_http_port }}"
            install_docker__portainer_https_port: "{{ inv_install_docker__portainer_https_port }}"
            install_docker__portainer_agent_port: "{{ inv_install_docker__portainer_agent_port }}"
            install_docker__portainer_container_name: "{{ inv_install_docker__portainer_container_name }}"
            install_docker__portainer_volume_name: "{{ inv_install_docker__portainer_volume_name }}"
            install_docker__portainer_ssl: "{{ inv_install_docker__portainer_ssl }}"
            install_docker__portainer_ssl_volume_name: "{{ inv_install_docker__portainer_ssl_volume_name }}"
            install_docker__portainer_ssl_key: "{{ inv_install_docker__portainer_ssl_cert }}"
            install_docker__watchtower: "{{ inv_install_docker__watchtower }}"
            install_docker__watchtower_poll_interval: "{{ inv_install_docker__watchtower_poll_interval }}"
            install_docker__watchtower_cleanup: "{{ inv_install_docker__watchtower_cleanup }}"
            install_docker__watchtower_include_restarting: "{{ inv_install_docker__watchtower_include_restarting }}"
            install_docker__watchtower_include_stopped: "{{ inv_install_docker__watchtower_include_stopped }}"
            install_docker__watchtower_no_restart: "{{ inv_install_docker__watchtower_no_restart }}"
            install_docker__portainer_address: "{{ inv_install_docker__portainer_address }}"
            install_docker__handle_clean: "{{ inv_install_docker__handle_clean }}"
            install_docker__clean_cron_file: "{{ inv_install_docker__clean_cron_file }}"
            install_docker__clean_weekday: "{{ inv_install_docker__clean_weekday }}"
            install_docker__clean_minute: "{{ inv_install_docker__clean_minute }}"
            install_docker__clean_hour: "{{ inv_install_docker__clean_hour }}"
            install_docker__disable_swap: "{{ inv_install_docker__disable_swap }}"
          ansible.builtin.include_role:
            name: "labocbz.install_docker"

        - name: "Include labocbz.install_sonarqube"
          tags:
            - "labocbz.install_sonarqube"
          vars:
            install_sonarqube__postgres_sonarqube_login: "{{ inv_install_sonarqube__postgres_sonarqube_login }}"
            install_sonarqube__postgres_sonarqube_password: "{{ inv_install_sonarqube__postgres_sonarqube_password }}"
            install_sonarqube__container_name: "{{ inv_install_sonarqube__container_name }}"
            install_sonarqube__postgresql_container_name: "{{ inv_install_sonarqube__postgresql_container_name }}"
            install_sonarqube__web_host: "{{ inv_install_sonarqube__web_host }}"
            install_sonarqube__web_port: "{{ inv_install_sonarqube__web_port }}"
          ansible.builtin.include_role:
            name: "labocbz.install_sonarqube"

    - name: "Install Apache2"
      when: inv_install_apache | default(false)
      block:
        - name: "Include labocbz.prepare_host"
          tags:
            - "labocbz.prepare_host"
          vars:
            prepare_host__system_users: "{{ inv_prepare_host__apache_system_users }}"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.add_certificates"
          tags:
            - "labocbz.add_certificates"
          loop: "{{ inv_add_apache_confs__configurations_cert_bundles }}"
          loop_control:
            loop_var: bundle
          when: inv_add_apache_confs__configurations_cert_bundles is defined
          vars:
            add_certificates__bundle_name: "{{ bundle.name }}"
            add_certificates__bundle_type: "{{ bundle.type }}"
            add_certificates__bundle_src: "{{ bundle.src }}"
            add_certificates__bundle_dest: "{{ bundle.dest }}"
            add_certificates__bundle_src_user: "{{ bundle.src_user }}"
            add_certificates__bundle_src_password: "{{ bundle.src_password }}"
            add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
            add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
            add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
          ansible.builtin.include_role:
            name: "labocbz.add_certificates"

        - name: "Include labocbz.install_apache"
          tags:
            - "labocbz.install_apache"
          vars:
            install_apache__https_listen_port: "{{ inv_install_apache__https_listen_port }}"
            install_apache__http_listen_port: "{{ inv_install_apache__http_listen_port }}"
            install_apache__modules: "{{ inv_install_apache__modules }}"
            install_apache__enable_qos: "{{ inv_install_apache__enable_qos }}"
            install_apache__enable_security: "{{ inv_install_apache__enable_security }}"
            install_apache__security_core_version: "{{ inv_install_apache__security_core_version }}"
            install_apache__remove_all_vhosts: "{{ inv_install_apache__remove_all_vhosts }}"
            install_apache__loglevel: "{{ inv_install_apache__loglevel }}"
            install_apache__security_version: "{{ inv_install_apache__security_version }}"
            install_apache__enable_evasive: "{{ inv_install_apache__enable_evasive }}"
            install_apache__enable_pagespeed: "{{ inv_install_apache__enable_pagespeed }}"
            install_apache__enable_prefork: "{{ inv_install_apache__enable_prefork }}"
          ansible.builtin.include_role:
            name: "labocbz.install_apache"

        - name: "Include labocbz.add_apache_confs"
          tags:
            - "labocbz.add_apache_confs"
          vars:
            add_apache_confs__http_listen_port: "{{ inv_add_apache_confs__http_listen_port }}"
            add_apache_confs__https_listen_port: "{{ inv_add_apache_confs__https_listen_port }}"
            add_apache_confs__ldap_url: "{{ inv_add_apache_confs__ldap_url }}"
            add_apache_confs__ldap_port: "{{ inv_add_apache_confs__ldap_port }}"
            add_apache_confs__ldap_dc: "{{ inv_add_apache_confs__ldap_dc }}"
            add_apache_confs__auth_ldap_url: "{{ inv_add_apache_confs__auth_ldap_url }}"
            add_apache_confs__custom_ldap_base_header: "{{ inv_add_apache_confs__custom_ldap_base_header }}"
            add_apache_confs__webmaster: "{{ inv_add_apache_confs__webmaster }}"
            add_apache_confs__request_body: "{{ inv_add_apache_confs__request_body }}"
            add_apache_confs__security_body_limit: "{{ inv_add_apache_confs__security_body_limit }}"
            add_apache_confs__ssl_files_path: "{{ inv_add_apache_confs__ssl_files_path }}"
            add_apache_confs__confs_path: "{{ inv_add_apache_confs__confs_path }}"
            add_apache_confs__base_document_root: "{{ inv_add_apache_confs__base_document_root }}"
            add_apache_confs__configurations: "{{ inv_add_apache_confs__configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_apache_confs"

        - name: "Include labocbz.add_logrotate_confs"
          tags:
            - "labocbz.add_logrotate_confs"
          vars:
            add_logrotate_confs__files: "{{ inv_add_logrotate_confs__apache_configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_logrotate_confs"

        - name: "Block all trafic from other hosts on port SonarQube (disable acces to SonarQube without Apache2)"
          ansible.builtin.iptables:
            chain: "INPUT"
            protocol: "tcp"
            destination_port: "{{ inv_install_sonarqube__web_port }}"
            jump: "DROP"
            source: "! 127.0.0.1"
            comment: "Force external user to use SonarQube"

        - name: "Block all trafic from other hosts on port PostgreSQL (disable acces to PostgreSQL)"
          ansible.builtin.iptables:
            chain: "INPUT"
            protocol: "tcp"
            destination_port: "5432"
            jump: "DROP"
            source: "! 127.0.0.1"
            comment: "Force external user to use PostgreSQL"
